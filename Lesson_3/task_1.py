"""
Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
from time import time

lst = []
dct = {}
num = 100000


def time_count_dec(func):
    """декоратор на определение времени выполнения функции"""

    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f'Время функции {func.__name__}: {end-start}')
        return result
    return timer


@time_count_dec
def fill_list_end(lst, num):
    """Заполнение списка в конец """
    for n in range(num):
        lst.append(n)  # сложность O(1)


fill_list_end(lst, num)
print('#' * 50)


@time_count_dec
def fill_list_start(lst, num):
    """заполнение списка сначала"""
    for n in range(num):
        lst.insert(0, n)  # сложность O(n)


fill_list_start(lst, num)
print('#' * 50)


@time_count_dec
def fill_dict(dct, num):
    """заполнение словаря"""
    for n in range(num):
        dct[n] = n
        # заполнение словаря занимает меньше времени, так как он представляет из себя хеш-таблицу
        # операция добавления нового элемента имеет сложность О(1).


fill_dict(dct, num)
print('#' * 50)

#  операции со списком и словарем


@time_count_dec
def change_lst(lst):
    """ изменение списка """
    for n in range(100):        # удаляем 100 элементов списка
        lst.pop(n)              # O(n)
    for k in range(100):        # изменяем 100 элементов списка
        lst[k] = lst[k + 1]     # O(1)


change_lst(lst)
print('#' * 50)


@time_count_dec
def change_dict(dct):
    """ изменение словаря """
    for n in range(100):
        dct.pop(n)              # O(1)
    for k in range(101, 102):
        dct[k] = 'corrected'    # O(1)
# Функции изменения словаря работают гораздо быстрее

change_dict(dct)
print('#' * 50)
